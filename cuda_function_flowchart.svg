<svg viewBox="0 0 1200 1800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Define gradients for beautiful styling -->
    <linearGradient id="startGrad" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="processGrad" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#2196F3;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1976D2;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="loopGrad" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#FF9800;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#F57C00;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="conditionGrad" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#9C27B0;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#7B1FA2;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="foundGrad" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#F44336;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D32F2F;stop-opacity:1" />
    </linearGradient>
    
    <!-- Shadow filter -->
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-opacity="0.3"/>
    </filter>
  </defs>
  
  <!-- Background -->
  <rect width="1200" height="1800" fill="#f5f5f5"/>
  
  <!-- Title -->
  <text x="600" y="40" font-family="Arial, sans-serif" font-size="28" font-weight="bold" text-anchor="middle" fill="#333">
    CUDA Cryptographic Key Search Function
  </text>
  <text x="600" y="70" font-family="Arial, sans-serif" font-size="18" text-anchor="middle" fill="#666">
    start_optimized() - Parallel Bitcoin Address Search
  </text>
  
  <!-- Start -->
  <ellipse cx="600" cy="120" rx="100" ry="40" fill="url(#startGrad)" filter="url(#shadow)"/>
  <text x="600" y="128" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="white">START</text>
  
  <!-- Thread initialization -->
  <rect x="450" y="180" width="300" height="80" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="600" y="210" font-family="Arial, sans-serif" font-size="14" text-anchor="middle" fill="white">Initialize Thread</text>
  <text x="600" y="230" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">tid = blockIdx.x * blockDim.x + threadIdx.x</text>
  <text x="600" y="248" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">Setup RNG with seed mixing</text>
  
  <!-- Print info (thread 0 only) -->
  <polygon points="600,290 700,330 600,370 500,330" fill="url(#conditionGrad)" filter="url(#shadow)"/>
  <text x="600" y="335" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">Thread 0?</text>
  
  <rect x="750" y="310" width="180" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="840" y="335" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">Print min, max,</text>
  <text x="840" y="352" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">and target</text>
  
  <!-- Pre-allocate variables -->
  <rect x="450" y="400" width="300" height="100" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="600" y="430" font-family="Arial, sans-serif" font-size="14" text-anchor="middle" fill="white">Pre-allocate Variables</text>
  <text x="600" y="450" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• BigInt structures</text>
  <text x="600" y="468" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• EC Points, Arrays</text>
  <text x="600" y="486" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• Convert target to bytes</text>
  
  <!-- Main loop -->
  <rect x="450" y="530" width="300" height="60" rx="10" fill="url(#loopGrad)" filter="url(#shadow)"/>
  <text x="600" y="555" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">MAIN LOOP</text>
  <text x="600" y="573" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">while (local_found == 0 &amp;&amp; g_found == 0)</text>
  
  <!-- Generate random -->
  <rect x="450" y="620" width="300" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="600" y="645" font-family="Arial, sans-serif" font-size="13" text-anchor="middle" fill="white">Generate Random BigInt</text>
  <text x="600" y="663" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">in range [min, max]</text>
  
  <!-- Nested loops -->
  <rect x="100" y="710" width="1000" height="780" rx="15" fill="none" stroke="#FF9800" stroke-width="3" stroke-dasharray="10,5"/>
  <text x="110" y="730" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#FF9800">Nested Loops</text>
  
  <!-- Loop structure -->
  <rect x="150" y="750" width="200" height="50" rx="10" fill="url(#loopGrad)" filter="url(#shadow)"/>
  <text x="250" y="780" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">inv: 0 to 1</text>
  
  <rect x="400" y="750" width="200" height="50" rx="10" fill="url(#loopGrad)" filter="url(#shadow)"/>
  <text x="500" y="780" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">z: 0 to 1</text>
  
  <rect x="650" y="750" width="200" height="50" rx="10" fill="url(#loopGrad)" filter="url(#shadow)"/>
  <text x="750" y="780" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">y: 0 to length-5</text>
  
  <rect x="900" y="750" width="180" height="50" rx="10" fill="url(#loopGrad)" filter="url(#shadow)"/>
  <text x="990" y="780" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">x: 0 to 15</text>
  
  <!-- Core operations box -->
  <rect x="200" y="830" width="800" height="280" rx="10" fill="#f0f0f0" filter="url(#shadow)"/>
  <text x="600" y="855" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#333">Core Cryptographic Operations</text>
  
  <!-- Core operations -->
  <rect x="220" y="870" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="400" y="900" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">1. Convert binary to BigInt (priv2)</text>
  
  <rect x="620" y="870" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="800" y="900" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">2. Scalar mod n (if needed)</text>
  
  <rect x="220" y="930" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="400" y="960" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">3. EC Point Multiplication (Jacobian)</text>
  
  <rect x="620" y="930" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="800" y="960" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">4. Convert to Affine &amp; Compress</text>
  
  <rect x="420" y="990" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="600" y="1020" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">5. Calculate RIPEMD160 Hash</text>
  
  <rect x="420" y="1050" width="360" height="50" rx="8" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="600" y="1080" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">local_keys_checked++</text>
  
  <!-- Check match -->
  <polygon points="600,1150 700,1190 600,1230 500,1190" fill="url(#conditionGrad)" filter="url(#shadow)"/>
  <text x="600" y="1188" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">Hash matches</text>
  <text x="600" y="1205" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">target?</text>
  
  <!-- Found branch -->
  <rect x="750" y="1160" width="300" height="120" rx="10" fill="url(#foundGrad)" filter="url(#shadow)"/>
  <text x="900" y="1190" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">KEY FOUND!</text>
  <text x="900" y="1210" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• Atomic set g_found = 1</text>
  <text x="900" y="1228" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• Store hex &amp; hash160</text>
  <text x="900" y="1246" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• Print results</text>
  <text x="900" y="1264" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">• Break all loops</text>
  
  <!-- Binary operations -->
  <rect x="200" y="1310" width="300" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="350" y="1335" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">binary_vertical_rotate_up()</text>
  <text x="350" y="1353" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">(after each x iteration)</text>
  
  <rect x="520" y="1310" width="280" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="660" y="1335" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">binary_rotate_left_by_one()</text>
  <text x="660" y="1353" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">(after each y iteration)</text>
  
  <rect x="200" y="1390" width="300" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="350" y="1415" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">reverseBinaryAfterFirst1()</text>
  <text x="350" y="1433" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">(after each z iteration)</text>
  
  <rect x="520" y="1390" width="280" height="60" rx="10" fill="url(#processGrad)" filter="url(#shadow)"/>
  <text x="660" y="1415" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">invertBinaryAfterFirst1()</text>
  <text x="660" y="1433" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">(after each inv iteration)</text>
  
  <!-- End -->
  <ellipse cx="600" cy="1550" rx="100" ry="40" fill="url(#foundGrad)" filter="url(#shadow)"/>
  <text x="600" y="1558" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="white">END</text>
  
  <!-- Arrows -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#333" />
    </marker>
  </defs>
  
  <!-- Connection arrows -->
  <path d="M 600 160 L 600 180" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 260 L 600 290" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 700 330 L 750 340" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 840 370 L 840 390 L 600 390 L 600 400" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 370 L 600 400" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 500 L 600 530" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 590 L 600 620" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 680 L 600 710" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 600 1230 L 600 1310" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 700 1190 L 750 1190" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 900 1280 L 900 1520 L 650 1520" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  <path d="M 500 1450 L 500 1520 L 550 1520" stroke="#333" stroke-width="2" fill="none" marker-end="url(#arrowhead)"/>
  
  <!-- Loop back arrow -->
  <path d="M 100 1450 L 100 600 L 450 600" stroke="#FF9800" stroke-width="3" fill="none" marker-end="url(#arrowhead)" stroke-dasharray="5,5"/>
  
  <!-- Legend -->
  <rect x="50" y="1620" width="1100" height="150" rx="10" fill="#fff" stroke="#ddd" stroke-width="2"/>
  <text x="600" y="1650" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#333">Key Features</text>
  
  <circle cx="100" cy="1690" r="8" fill="#4CAF50"/>
  <text x="120" y="1695" font-family="Arial, sans-serif" font-size="12" fill="#333">Initialization &amp; Start</text>
  
  <circle cx="300" cy="1690" r="8" fill="#2196F3"/>
  <text x="320" y="1695" font-family="Arial, sans-serif" font-size="12" fill="#333">Processing Steps</text>
  
  <circle cx="500" cy="1690" r="8" fill="#FF9800"/>
  <text x="520" y="1695" font-family="Arial, sans-serif" font-size="12" fill="#333">Loops &amp; Iterations</text>
  
  <circle cx="700" cy="1690" r="8" fill="#9C27B0"/>
  <text x="720" y="1695" font-family="Arial, sans-serif" font-size="12" fill="#333">Conditions</text>
  
  <circle cx="900" cy="1690" r="8" fill="#F44336"/>
  <text x="920" y="1695" font-family="Arial, sans-serif" font-size="12" fill="#333">Success/End</text>
  
  <text x="100" y="1730" font-family="Arial, sans-serif" font-size="11" fill="#666">• Parallel CUDA threads search different random keys</text>
  <text x="100" y="1748" font-family="Arial, sans-serif" font-size="11" fill="#666">• Each thread generates variations through binary rotations</text>
  <text x="600" y="1730" font-family="Arial, sans-serif" font-size="11" fill="#666">• Uses elliptic curve cryptography (secp256k1)</text>
  <text x="600" y="1748" font-family="Arial, sans-serif" font-size="11" fill="#666">• Searches for matching RIPEMD160 hash</text>
</svg>